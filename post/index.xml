<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Teoking writes something.</title>
    <link>https://teoking.github.io/post/</link>
    <description>Recent content in Posts on Teoking writes something.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 30 May 2022 21:41:24 +0800</lastBuildDate><atom:link href="https://teoking.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Window Subsystem Android Review</title>
      <link>https://teoking.github.io/post/wsa_review/</link>
      <pubDate>Mon, 30 May 2022 21:41:24 +0800</pubDate>
      
      <guid>https://teoking.github.io/post/wsa_review/</guid>
      <description>周末看到TG Android Dev群里有人在讨论Windows Subsystem Android（WSA），觉得有点意思。于是周末花了数个小时，把笔记本安装上Windows</description>
    </item>
    
    <item>
      <title>libopenshot-Effect,KeyFrame和Transition</title>
      <link>https://teoking.github.io/post/libopenshot/effect-transition/</link>
      <pubDate>Wed, 04 Aug 2021 19:31:05 +0800</pubDate>
      
      <guid>https://teoking.github.io/post/libopenshot/effect-transition/</guid>
      <description>Effect 上图展示了在OpenShot中给视频添加了Wave这个效果： 选择Effect拖拽到对应clip上 选择效果图标，可以看到effect属性修改</description>
    </item>
    
    <item>
      <title>libopenshot-Timeline和Clip中的Frame合成</title>
      <link>https://teoking.github.io/post/libopenshot/timeline/</link>
      <pubDate>Mon, 02 Aug 2021 15:28:28 +0800</pubDate>
      
      <guid>https://teoking.github.io/post/libopenshot/timeline/</guid>
      <description>在《libopenshot-基本概念以及播放器实现》一文中，其中一个示例是两个clip操作的展示，我们实现了在视频画面之上显示一张静态图片。</description>
    </item>
    
    <item>
      <title>专题-从libopenshot学习视频编辑器</title>
      <link>https://teoking.github.io/post/libopenshot/outline/</link>
      <pubDate>Fri, 30 Jul 2021 15:28:28 +0800</pubDate>
      
      <guid>https://teoking.github.io/post/libopenshot/outline/</guid>
      <description>libopenshot简介 libopenshot是OpenShot这款桌面软件的编辑库，其包含的功能有： Cross-Platform (Linux, Mac, and Windows) &amp;ndash; 跨平台。我使用Windo</description>
    </item>
    
    <item>
      <title>libopenshot-基本概念以及播放器实现</title>
      <link>https://teoking.github.io/post/libopenshot/concept-and-player-impl/</link>
      <pubDate>Wed, 28 Jul 2021 20:08:28 +0800</pubDate>
      
      <guid>https://teoking.github.io/post/libopenshot/concept-and-player-impl/</guid>
      <description>概要 四大模块 要理解libopenshot，就先要理解以下四个最基本的构建块（类似于Android中的四大组件）： Readers: 一个reader是用以读取</description>
    </item>
    
    <item>
      <title>libopenshot-编译</title>
      <link>https://teoking.github.io/post/libopenshot/build/</link>
      <pubDate>Tue, 20 Jul 2021 21:28:28 +0800</pubDate>
      
      <guid>https://teoking.github.io/post/libopenshot/build/</guid>
      <description>编译 Mac端编译 编译方法请参照官方文档Mac Build Instructions, 代码基于70aedd3. 这里记录一下我在macOS 11.4（非M1）上编译时碰到的错误。 命令</description>
    </item>
    
    <item>
      <title>设计模式之美笔记二：设计原则</title>
      <link>https://teoking.github.io/post/dp_principle_theory_and_actions/</link>
      <pubDate>Wed, 16 Jun 2021 21:43:11 +0800</pubDate>
      
      <guid>https://teoking.github.io/post/dp_principle_theory_and_actions/</guid>
      <description>理论 SOLID原则 单一职责原则（SRP） Single Responsibility Principle：A class or module should have a single responsibility。 一个类或者模块只负责完成一个职</description>
    </item>
    
    <item>
      <title>Canvas API Demo及性能优化</title>
      <link>https://teoking.github.io/post/learn_android_canvas_by_samples/</link>
      <pubDate>Tue, 08 Jun 2021 20:42:07 +0800</pubDate>
      
      <guid>https://teoking.github.io/post/learn_android_canvas_by_samples/</guid>
      <description>本片文章通过两个例子来看一下Canvas API的用法，以及如何通过HWUI Trace和Profiler测试性能并进行优化。 示例一：手指涂鸦 doodle</description>
    </item>
    
    <item>
      <title>设计模式之美笔记一：面向对象理论与实战</title>
      <link>https://teoking.github.io/post/dp_oo_theory_and_actions/</link>
      <pubDate>Thu, 03 Jun 2021 21:37:28 +0800</pubDate>
      
      <guid>https://teoking.github.io/post/dp_oo_theory_and_actions/</guid>
      <description>面向对象 什么是面向对象？ 什么是面向对象编程？ 面向对象编程是一种编程范式或编程风格。它以类或对象作为组织代码的基本单元，并将封装、抽象、继承、</description>
    </item>
    
    <item>
      <title>从单元测试看Handler</title>
      <link>https://teoking.github.io/post/learn_handler_by_unit_tests/</link>
      <pubDate>Mon, 31 May 2021 23:41:15 +0800</pubDate>
      
      <guid>https://teoking.github.io/post/learn_handler_by_unit_tests/</guid>
      <description>首先提出两个问题： Handler主要解决了什么问题？ 如何实现的延迟消息？ 概述 Handler是Android OS中根基性的组件，在framew</description>
    </item>
    
    <item>
      <title>ScrollView中大图片渲染性能测试及优化</title>
      <link>https://teoking.github.io/post/large_bitmap_rendering_optimization/</link>
      <pubDate>Fri, 21 May 2021 19:25:10 +0800</pubDate>
      
      <guid>https://teoking.github.io/post/large_bitmap_rendering_optimization/</guid>
      <description>编辑器UI中的性能问题 在编辑器的拼长图功能中，ScrollView最多容纳9个image view（自定义的图片view，非ImageView</description>
    </item>
    
    <item>
      <title>Android渲染Part1:  帧渲染</title>
      <link>https://teoking.github.io/post/android_render_part1/</link>
      <pubDate>Fri, 14 May 2021 14:47:46 +0800</pubDate>
      
      <guid>https://teoking.github.io/post/android_render_part1/</guid>
      <description>这篇文章是Chet Haase和Romain Guy做的&amp;lt;Drawn out: How Android renders (Google I/O &amp;lsquo;18)&amp;gt;演讲的翻译。由于内容较多分为两</description>
    </item>
    
    <item>
      <title>iOS - CollectionViewCell对应不同flow layout的实例</title>
      <link>https://teoking.github.io/post/ios_collectionviewcell_with_different_flowlayout/</link>
      <pubDate>Thu, 06 May 2021 19:11:28 +0800</pubDate>
      
      <guid>https://teoking.github.io/post/ios_collectionviewcell_with_different_flowlayout/</guid>
      <description>UI交互 最近实现如下UI界面： 交互细节大致如下： 外部UICollectionView启用paging，左右滑动切换cell Cell（A/B/</description>
    </item>
    
    <item>
      <title>Android Development最佳实践</title>
      <link>https://teoking.github.io/post/android_development_best_practices/</link>
      <pubDate>Thu, 06 May 2021 19:08:37 +0800</pubDate>
      
      <guid>https://teoking.github.io/post/android_development_best_practices/</guid>
      <description>原文：Android Development | Best Practices 仅仅写代码是不够的，要高效地写代码。 下面是作者总结的Android开发最佳实践。 Tips and not Tricks 1) Choose your App Architecture wisely based on your need, not just</description>
    </item>
    
    <item>
      <title>Android VectorDrawable系列文章Review</title>
      <link>https://teoking.github.io/post/android_vectordrawable_guides_notes/</link>
      <pubDate>Thu, 06 May 2021 19:05:47 +0800</pubDate>
      
      <guid>https://teoking.github.io/post/android_vectordrawable_guides_notes/</guid>
      <description>该系列文章作者是Android团队的Nick Butcher： Understanding Android’s vector image format: VectorDrawable Draw a Path: Rendering Android VectorDrawables Using vector assets in Android apps Vector Assets - Android Conference Talks Vector Drawabl</description>
    </item>
    
    <item>
      <title>iOS touch事件的拦截</title>
      <link>https://teoking.github.io/post/intercept_touch_event_in_ios/</link>
      <pubDate>Thu, 06 May 2021 18:59:24 +0800</pubDate>
      
      <guid>https://teoking.github.io/post/intercept_touch_event_in_ios/</guid>
      <description>最近实现了这样一个需求：当点击一个全屏的modal view时，这个事件同时要“转发”给modal view下面一层中的action view。 分</description>
    </item>
    
    <item>
      <title>RxSwift和RxCocoa入门</title>
      <link>https://teoking.github.io/post/getting_started_with_rxswift_and_rxcocoa/</link>
      <pubDate>Thu, 06 May 2021 18:19:57 +0800</pubDate>
      
      <guid>https://teoking.github.io/post/getting_started_with_rxswift_and_rxcocoa/</guid>
      <description>本文主要来自Getting Started With RxSwift and RxCocoa这篇文章 命令式编程 vs 响应式编程 目前大部分面向对象语言都是命令式的编程范式，即通过代码下达命令</description>
    </item>
    
    <item>
      <title>Lex Fridman: How to learn and master a new skill简评</title>
      <link>https://teoking.github.io/post/lex_fridman_learn_and_master_a_skill_note/</link>
      <pubDate>Thu, 06 May 2021 18:14:47 +0800</pubDate>
      
      <guid>https://teoking.github.io/post/lex_fridman_learn_and_master_a_skill_note/</guid>
      <description>视频地址：How to learn and master a new skill 视频原文 Lex Fridman: How to learn and master a new skill First question is you&amp;rsquo;ve reached a high level of ability slash expertise in a number of fields martial arts, ai, music etc. I&amp;rsquo;m curious to know how you think about the learning process when juggling all of these things. It takes</description>
    </item>
    
    <item>
      <title>Android中绘制圆角的三种方式</title>
      <link>https://teoking.github.io/post/draw_round_corner_3ways_in_android/</link>
      <pubDate>Thu, 06 May 2021 17:52:46 +0800</pubDate>
      
      <guid>https://teoking.github.io/post/draw_round_corner_3ways_in_android/</guid>
      <description>在iOS平台中，给View指定圆角是很方便的。只需要在代码中设置layer.cornerRadius即可。但在Android平台中，事情却有</description>
    </item>
    
    <item>
      <title>Kotlin Coroutine in Action</title>
      <link>https://teoking.github.io/post/kotlin_coroutine_in_action/</link>
      <pubDate>Thu, 06 May 2021 17:46:28 +0800</pubDate>
      
      <guid>https://teoking.github.io/post/kotlin_coroutine_in_action/</guid>
      <description>这篇文章是我对团队内的一次技术分享 Outline What is Kotlin Coroutine? 协程什么？解决了什么问题？ 协程概念核心点：函数或一段程序能够被挂起，稍后再在挂起的位置恢复。 与线</description>
    </item>
    
    <item>
      <title>Android GLES基础：从TextRender看Renderer实现</title>
      <link>https://teoking.github.io/post/implement_an_gles_renderer_in_android/</link>
      <pubDate>Thu, 06 May 2021 17:42:32 +0800</pubDate>
      
      <guid>https://teoking.github.io/post/implement_an_gles_renderer_in_android/</guid>
      <description>以AOSP Media CTS中的TextureRender的实现来分析和理解OpenGL ES 2.0在Android平台的使用。 通常，实现一个render</description>
    </item>
    
    <item>
      <title>再立一个flag</title>
      <link>https://teoking.github.io/post/another_one/</link>
      <pubDate>Thu, 06 May 2021 16:48:27 +0800</pubDate>
      
      <guid>https://teoking.github.io/post/another_one/</guid>
      <description>五一假期归来，身心愉悦。 开始把自己写的杂七杂八的文章整理到这里。</description>
    </item>
    
  </channel>
</rss>
